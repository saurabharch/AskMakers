rules_version = '2';
function adminControl() {
  return request.auth.token.admin == true;
}
function isLogin() {
  return request.auth.uid != null;
}
function onlyIdentityUser(userId) {
  return request.auth.uid == userId;
}
service cloud.firestore {
  match /databases/{database}/documents {
    match /secretUsers/{userId} {
      allow read: if onlyIdentityUser(userId);
      allow write: if onlyIdentityUser(userId);
    }
    match /publicUsers/{userId} {
      allow read: if true;
      allow write: if onlyIdentityUser(userId);
    }
    match /publicUsers/{userId}/bookmarks/{bookmarkId} {
      allow read: if true;
      allow write: if onlyIdentityUser(userId);
    }
    match /publicUsers/{userId}/settings/{settingId} {
      allow read: if true;
      allow write: if onlyIdentityUser(userId);
    }
    match /questions/{questionId} {
      allow read: if true;
      allow write: if isLogin();
    }
    match /questions/{questionId}/body/{bodyId} {
      allow read: if true;
      allow write: if isLogin();
    }
    match /questionsTopic/{questionsTopicId} {
      allow read: if true;
      allow write: if isLogin();
    }
    match /answers/{answerId} {
      allow read: if true;
      allow write: if isLogin();
    }
    match /bookmarks/{bookmarkId} {
      allow read: if isLogin();
      allow write: if isLogin();
    }
    match /thanks/{thankId} {
      allow read: if isLogin();
      allow write: if isLogin();
    }
    match /upvotes/{upvoteId} {
      allow read: if true;
      allow write: if isLogin();
    }
    match /questionUpvotes/{upvoteId} {
      allow read: if true;
      allow write: if isLogin();
    }
    match /upvoteAnswerRanking/{rankingId} {
      allow read: if true;
      allow write: if isLogin();
    }
  }
}
